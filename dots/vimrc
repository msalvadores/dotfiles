call pathogen#infect()
syntax enable
filetype plugin indent on

set noeb " disable error bell
set novb " don't blink the screen when there is an error
set backupext=.bak  " Append `.bak' to backups
set nocompatible
set number
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 nolist
set hlsearch
inoremap JJ <ESC>
noremap QQ <ESC>:q<CR>
noremap WW <ESC>:w<CR>
inoremap WW <ESC>:w<CR>
noremap TT <ESC>:tabnew<CR>ww
noremap FF <ESC>:Fmt<CR>

"nerd tree ctrl-d toggle
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
let NERDTreeIgnore = ['\.pyc$','\.class$','\.swp$']

set wildignore+=*.swp,*.pyc,*.class

"search across files in current project - selected text
command GF :execute 'vimgrep /'.expand('<cword>').'/j '.expand(' **/*.c **/*.h **/*.java **/*.py **/*.js **/*.html **/*.rb') | copen


" Make up/down arrows move by display lines instead of physical lines
nnoremap <Up> gk
nnoremap <Down> gj

" Overload Control+L to also clear  search highlighting
nnoremap <C-L> :nohlsearch<CR><C-L>

" Center display line after searches "
nnoremap n   nzz
nnoremap N  Nzz
nnoremap *  *zz
nnoremap #  #zz
nnoremap g* g*zz
nnoremap g# g#z

" Search for current word in new window
nnoremap <Leader>v :let @/=expand("<cword>")<Bar>split<Bar>normal n<CR>
nnoremap <Leader>V :let @/='\<'.expand("<cword>").'\>'<Bar>split<Bar>normal n<CR>

"delete no-yank
nnoremap R "_d

"inc search
set incsearch
set ignorecase    " ignore case when searching
set smartcase

"color accuracy in remote ssh terminals
" revisit http://vim.wikia.com/wiki/Switch_color_schemes
set t_Co=256
colorscheme jelleybeans

if has('statusline')
	set laststatus=2

	" Broken down into easily includeable segments
	set statusline=%<%f\    " Filename
	set statusline+=%w%h%m%r " Options
	set statusline+=\ [%{getcwd()}]          " current dir
	set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

"ruby indentation
autocmd BufNewFile,BufRead *.rb set tabstop=2
autocmd BufNewFile,BufRead *.rb set shiftwidth=2

"ask for reload
":au FileChangedShell * echo "Warning: File changed on disk"
"

set backspace=2 " make backspace work like most other apps


"update syntastic errors on save
let g:syntastic_always_populate_loc_list=1

"use the goimports tools instead default fmt
let g:gofmt_command = "goimports"

"format Go commands on save
"autocmd FileType go autocmd BufWritePre <buffer> Fmt
"

"enable nice airline status line
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tmuxline#enabled = 0
let g:airline_theme='badwolf'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#fnamemod = ':t'
if !exists('g:airline_symbols')
 let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

"low timeout for escaping
set timeoutlen=1000 ttimeoutlen=50
set cursorline

inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>
